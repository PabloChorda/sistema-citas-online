"""Migración inicial completa de todos los modelos y ENUMs

Revision ID: 9c9ff46a6cfe
Revises: 
Create Date: 2025-05-23 20:40:04.534407

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Ya lo tienes, ¡perfecto!

# revision identifiers, used by Alembic.
revision = '9c9ff46a6cfe'
down_revision = None
branch_labels = None
depends_on = None

# --- INICIO DE DEFINICIÓN DE TIPOS ENUM (para usar en upgrade/downgrade) ---
day_of_week_enum_type = postgresql.ENUM(
    'LUNES', 'MARTES', 'MIERCOLES', 'JUEVES', 'VIERNES', 'SABADO', 'DOMINGO',
    name='dayofweektype_enum', 
    create_type=False # Le decimos a SQLAlchemy que no lo cree él; Alembic lo hará.
)
appointment_status_enum_type = postgresql.ENUM(
    'PENDING_PROVIDER', 'CONFIRMED', 'CANCELLED_BY_CLIENT', 
    'CANCELLED_BY_PROVIDER', 'COMPLETED', 'NO_SHOW',
    name='appointmentstatustype_enum', 
    create_type=False # Le decimos a SQLAlchemy que no lo cree él; Alembic lo hará.
)
# --- FIN DE DEFINICIÓN DE TIPOS ENUM ---


def upgrade():
    # --- INICIO DE TU CÓDIGO MANUAL PARA CREAR TIPOS ENUM ---
    day_of_week_enum_type.create(op.get_bind(), checkfirst=True)
    appointment_status_enum_type.create(op.get_bind(), checkfirst=True)
    # --- FIN DE TU CÓDIGO MANUAL PARA CREAR TIPOS ENUM ---

    # ### commands auto generated by Alembic - START ###
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('role', sa.String(length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_role'), ['role'], unique=False)

    op.create_table('providers',
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('business_name', sa.String(length=255), nullable=False),
    sa.Column('business_type', sa.String(length=100), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('profile_picture_url', sa.String(length=255), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('provider_id')
    )
    
    # SG: La tabla availability_rules usa dayofweektype_enum
    op.create_table('availability_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    # SG: Alembic ya usó el tipo ENUM aquí, lo cual es bueno.
    sa.Column('day_of_week', day_of_week_enum_type, nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('availability_rules', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_availability_rules_provider_id'), ['provider_id'], unique=False)

    op.create_table('services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('services', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_services_provider_id'), ['provider_id'], unique=False)

    op.create_table('time_blocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('start_datetime', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_datetime', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('time_blocks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_time_blocks_provider_id'), ['provider_id'], unique=False)

    # SG: La tabla appointments usa appointmentstatustype_enum
    op.create_table('appointments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=True),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=True),
    sa.Column('start_datetime', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_datetime', sa.DateTime(timezone=True), nullable=False),
    # SG: Alembic ya usó el tipo ENUM aquí, lo cual es bueno.
    sa.Column('status', appointment_status_enum_type, nullable=False),
    sa.Column('notes_client', sa.Text(), nullable=True),
    sa.Column('notes_provider', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('appointments', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_appointments_client_id'), ['client_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_appointments_provider_id'), ['provider_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_appointments_service_id'), ['service_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_appointments_start_datetime'), ['start_datetime'], unique=False)
        batch_op.create_index(batch_op.f('ix_appointments_status'), ['status'], unique=False)

    # ### commands auto generated by Alembic - END ###


def downgrade():
    # ### commands auto generated by Alembic - START ###
    with op.batch_alter_table('appointments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_appointments_status'))
        batch_op.drop_index(batch_op.f('ix_appointments_start_datetime'))
        batch_op.drop_index(batch_op.f('ix_appointments_service_id'))
        batch_op.drop_index(batch_op.f('ix_appointments_provider_id'))
        batch_op.drop_index(batch_op.f('ix_appointments_client_id'))

    op.drop_table('appointments') # SG: Se elimina la tabla que usa appointmentstatustype_enum

    with op.batch_alter_table('time_blocks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_time_blocks_provider_id'))

    op.drop_table('time_blocks')
    with op.batch_alter_table('services', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_services_provider_id'))

    op.drop_table('services')
    with op.batch_alter_table('availability_rules', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_availability_rules_provider_id'))

    op.drop_table('availability_rules') # SG: Se elimina la tabla que usa dayofweektype_enum
    
    op.drop_table('providers')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_role'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    
    # --- INICIO DE TU CÓDIGO MANUAL PARA ELIMINAR TIPOS ENUM ---
    # Eliminar los tipos ENUM DESPUÉS de eliminar las tablas que los usan
    appointment_status_enum_type.drop(op.get_bind(), checkfirst=True)
    day_of_week_enum_type.drop(op.get_bind(), checkfirst=True)
    # --- FIN DE TU CÓDIGO MANUAL PARA ELIMINAR TIPOS ENUM ---
    
    # ### commands auto generated by Alembic - END ###